// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// A generator is a tool that automatically creates code for us based on our database setup
generator client {
    provider = "prisma-client-js"
}

// Datasource determines how prisma connects to the database
datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id               Int                @id @default(autoincrement())
    email            String             @unique
    password         String
    firstName        String
    lastName         String
    boxRefreshToken  String?
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
    sessions         Session[] // establishes reverse relation to Session model (this is a feature in Prisma ORM, it is not a real column in the database)
    moduleTutorOf    ModuleTutor[]
    module           Module[]
    role             UserRole[]
    reviewGroup      ReviewGroup[]
    userNotification UserNotification[]
}

model Session {
    id        String   @id @default(uuid()) // Unique session identifier
    userId    Int
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Describes relation to User model (one session belongs to one user, this is a feature in Prisma ORM, it is not a real column in the database)
    userAgent String?
    createdAt DateTime @default(now())
    expiresAt DateTime // Expiration logic
}

// Many modules have many module tutors
// One module lead can lead many modules
model Module {
    id                     Int                      @id @default(autoincrement())
    code                   String                   @unique
    name                   String
    yearId                 Int
    year                   Year                     @relation(fields: [yearId], references: [id])
    moduleLeadId           Int?
    moduleLead             User?                    @relation(fields: [moduleLeadId], references: [id])
    reviewGroupId          Int?
    reviewGroup            ReviewGroup?             @relation(fields: [reviewGroupId], references: [id])
    moduleTutors           ModuleTutor[]
    assessment             Assessment[]
    academicYearAssessment AcademicYearAssessment[]
    tps                    ModuleTP[]
}

model ModuleTP {
    moduleId Int
    tpId     Int

    module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
    tp     TP     @relation(fields: [tpId], references: [id], onDelete: Cascade)

    @@id([moduleId, tpId]) // Composite primary key
}

model Year {
    id          Int           @id @default(autoincrement())
    name        String
    module      Module[]
    reviewGroup ReviewGroup[]
}

model ModuleTutor {
    userId   Int
    moduleId Int

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

    @@id([userId, moduleId]) // Composite primary key
}

model Role {
    id    Int        @id @default(autoincrement())
    name  String     @unique
    users UserRole[]
}

// Join table for User and Role
model UserRole {
    userId Int
    roleId Int

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

    @@id([userId, roleId])
}

// need to migrage again
model ReviewGroup {
    id         Int      @id @default(autoincrement())
    yearId     Int
    group      String
    convenerId Int
    modules    Module[]
    convener   User     @relation(fields: [convenerId], references: [id])
    year       Year     @relation(fields: [yearId], references: [id])
}

// Assessment created along with the module
model Assessment {
    id                   Int                @id @default(autoincrement())
    tpId                 Int
    tp                   TP                 @relation(fields: [tpId], references: [id])
    moduleId             Int
    weight               Float
    assessmentTypeId     Int
    assessmentCategoryId Int
    durationInMinutes    Int?
    module               Module             @relation(fields: [moduleId], references: [id])
    assessmentType       AssessmentType     @relation(fields: [assessmentTypeId], references: [id])
    assessmentCategory   AssessmentCategory @relation(fields: [assessmentCategoryId], references: [id])
}

model AcademicYearAssessment {
    id                   Int                @id @default(autoincrement())
    name                 String?
    tpId                 Int
    tp                   TP                 @relation(fields: [tpId], references: [id])
    academicYearId       Int
    academicYear         AcademicYear       @relation(fields: [academicYearId], references: [id])
    sentToEr             Boolean            @default(false)
    moduleId             Int
    weight               Float
    assessmentTypeId     Int
    assessmentCategoryId Int
    durationInMinutes    Int?
    releaseDate          DateTime?
    submissionDate       DateTime?
    folderId             String?
    module               Module             @relation(fields: [moduleId], references: [id])
    assessmentType       AssessmentType     @relation(fields: [assessmentTypeId], references: [id])
    assessmentCategory   AssessmentCategory @relation(fields: [assessmentCategoryId], references: [id])
}

model AcademicYear {
    id                     Int                      @id @default(autoincrement())
    year                   Int
    academicyearassessment AcademicYearAssessment[]
}

model AssessmentType {
    id   Int    @id @default(autoincrement())
    name String @unique

    assessment             Assessment[]
    academicYearAssessment AcademicYearAssessment[]
}

model AssessmentCategory {
    id   Int    @id @default(autoincrement())
    name String @unique

    assessment             Assessment[]
    academicYearAssessment AcademicYearAssessment[]
}

model Notification {
    id                 Int                @id @default(autoincrement())
    title              String
    message            String?
    createdAt          DateTime           @default(now())
    notificationTypeId Int
    userNotification   UserNotification[]
    notificationType   NotificationType   @relation(fields: [notificationTypeId], references: [id])
}

model UserNotification {
    id             Int          @id @default(autoincrement())
    userId         Int
    notificationId Int
    user           User         @relation(fields: [userId], references: [id])
    notification   Notification @relation(fields: [notificationId], references: [id])
}

model NotificationType {
    id           Int            @id @default(autoincrement())
    name         String
    notification Notification[]
}

model TP {
    id   Int    @id @default(autoincrement())
    name String

    moderationPhase        ModerationPhase[]
    assessment             Assessment[]
    academicYearAssessment AcademicYearAssessment[]
    modules                ModuleTP[]
}

model Stage {
    id   Int    @id @default(autoincrement())
    name String

    moderationPhase ModerationPhase[]
}

model ReviewType {
    id   Int    @id @default(autoincrement())
    name String

    moderationPhase ModerationPhase[]
}

model ModerationStatus {
    id                         Int             @id @default(autoincrement())
    moderationPhaseId          Int
    internalModerationDeadline DateTime
    externalModerationDeadline DateTime
    finalDeadline              DateTime
    finalizeReviewGroups       Boolean         @default(false)
    erFolderId                 String?
    moderationPhase            ModerationPhase @relation(fields: [moderationPhaseId], references: [id])
}

model ModerationPhase {
    id           Int          @id @default(autoincrement())
    tPId         Int
    stageId      Int
    reviewTypeId Int
    triggerId    Int
    tP           TP           @relation(fields: [tPId], references: [id])
    stage        Stage        @relation(fields: [stageId], references: [id])
    reviewType   ReviewType   @relation(fields: [reviewTypeId], references: [id])
    trigger      PhaseTrigger @relation(fields: [triggerId], references: [id])

    moderationStatus ModerationStatus[]
}

model PhaseTrigger {
    id   Int    @id @default(autoincrement())
    name String

    moderationPhase ModerationPhase[]
}

model Er {
    id       Int     @id @default(autoincrement())
    email    String  @unique
    folderId String?
}
