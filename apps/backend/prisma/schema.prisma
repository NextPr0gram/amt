// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// A generator is a tool that automatically creates code for us based on our database setup
generator client {
    provider = "prisma-client-js"
}

// Datasource determines how prisma connects to the database
datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            Int                     @id @default(autoincrement())
    email         String                  @unique
    password      String
    createdAt     DateTime                @default(now())
    updatedAt     DateTime                @updatedAt
    sessions      Session[] // establishes reverse relation to Session model (this is a feature in Prisma ORM, it is not a real column in the database)
    moduleTutorOf ModuleTutorAssignment[]
    Module        Module[]
}

model Session {
    id        String   @id @default(uuid()) // Unique session identifier
    userId    Int
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Describes relation to User model (one session belongs to one user, this is a feature in Prisma ORM, it is not a real column in the database)
    userAgent String?
    createdAt DateTime @default(now())
    expiresAt DateTime @default(dbgenerated("NOW() + interval '1 year'")) // Expiration logic
}

// Many modules have many module tutors
// One module lead can lead many modules
model Module {
    id           Int                     @id
    code         String
    name         String
    year         Int
    moduleLeadId Int?
    moduleLead   User?                   @relation(fields: [moduleLeadId], references: [id])
    moduleTutors ModuleTutorAssignment[]
}

model ModuleTutorAssignment {
    userId   Int
    moduleId Int

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

    @@id([userId, moduleId]) // Composite primary key
}
